#include <iostream>
#include <string>
#include <vector>
#include <sstream>

std::string runLengthEncode(const std::string& input) {
    std::string encoded = "";
    int n = input.length();

    for (int i = 0; i < n; i++) {
        int count = 1;
        while (i + 1 < n && input[i] == input[i + 1]) {
            count++;
            i++;
        }
        encoded += input[i] + std::to_string(count);
    }
    return encoded;
}

std::string runLengthDecode(const std::string& encoded) {
    std::string decoded = "";
    int n = encoded.length();

    for (int i = 0; i < n; i++) {
        char currentChar = encoded[i];
        i++;
        std::string countStr = "";

        while (i < n && isdigit(encoded[i])) {
            countStr += encoded[i];
            i++;
        }
        int count = std::stoi(countStr);
        decoded.append(count, currentChar);
        i--;
    }
    return decoded;
}

std::string rotateString(const std::string& encoded) {
    std::vector<std::string> lines;
    std::istringstream stream(encoded);
    std::string word;

    // Split the encoded string into "lines"
    while (stream >> word) {
        lines.push_back(word);
    }

    // Prepare for rotated string
    std::string rotated;

    // Create the rotated version
    for (size_t i = 0; i < lines.size(); ++i) {
        for (size_t j = lines.size(); j-- > 0; ) {
            if (i < lines[j].length()) {
                rotated += lines[j][i];
            }
        }
        rotated += ' ';  // Add space between "rotated lines"
    }

    return rotated;
}

int main() {
    std::string input = "A small cat";
    std::string encoded = runLengthEncode(input);
    std::string rotatedEncoded = rotateString(encoded);
    std::string decoded = runLengthDecode(rotatedEncoded);

    std::cout << "Input: " << input << std::endl;
    std::cout << "Encoded: " << encoded << std::endl;
    std::cout << "Rotated Encoded: " << rotatedEncoded << std::endl;
    std::cout << "Decoded from Rotated: " << decoded << std::endl;

    return 0;
}
